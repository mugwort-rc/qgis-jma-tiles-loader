# -*- coding: utf-8 -*-
"""
/***************************************************************************
 JMATilesLoaderDialog
                                 A QGIS plugin
 Dynamic layer loader of JMA Tiles
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-16
        git sha              : $Format:%H$
        copyright            : (C) 2024 by mugwort_rc
        email                : mugwort.rc@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from collections import OrderedDict
import datetime
import json
import os
import urllib.request

from qgis.core import QgsProject
from qgis.core import QgsRasterLayer
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSlot
from qgis.PyQt.QtCore import QStringListModel
from qgis.PyQt.QtWidgets import QAbstractButton

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'jma_tiles_loader_dialog_base.ui'))


class JMATilesLoaderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(JMATilesLoaderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.himawariBand = [
            "B13/TBB",
            "B03/ALBD",
            "B08/TBB",
            "REP/ETC",
            "SND/ETC",
        ]
        self.himawariBandModel = QStringListModel([
            self.tr("B13/TBB"),
            self.tr("B03/ALBD"),
            self.tr("B08/TBB"),
            self.tr("REP/ETC"),
            self.tr("SND/ETC"),
        ])
        self.comboBoxHimawariFullBand.setModel(self.himawariBandModel)
        self.comboBoxHimawariJapanBand.setModel(self.himawariBandModel)

        self.himawariFullTargetTime = OrderedDict()
        self.himawariFullTargetTimeModel = QStringListModel()
        self.comboBoxHimawariFullTargetTime.setModel(self.himawariFullTargetTimeModel)

        self.himawariJapanTargetTime = OrderedDict()
        self.himawariJapanTargetTimeModel = QStringListModel()
        self.comboBoxHimawariJapanTargetTime.setModel(self.himawariJapanTargetTimeModel)

        self.nowCastTargetTime = OrderedDict()
        self.nowCastTargetTimeModel = QStringListModel()
        self.comboBoxNowCastTargetTime.setModel(self.nowCastTargetTimeModel)

    @pyqtSlot()
    def on_toolButtonHimawariFullTargetTime_clicked(self):
        resp = urllib.request.urlopen("https://www.jma.go.jp/bosai/himawari/data/satimg/targetTimes_fd.json")
        data = json.load(resp)
        self.himawariFullTargetTime = OrderedDict()
        for item in reversed(data):
            dt = datetime.datetime.strptime(item["validtime"], "%Y%m%d%H%M%S")
            self.himawariFullTargetTime[dt.strftime("%Y-%m-%dT%H:%M:%S")] = item
        self.himawariFullTargetTimeModel.setStringList([x for x in self.himawariFullTargetTime])

    @pyqtSlot()
    def on_toolButtonHimawariJapanTargetTime_clicked(self):
        resp = urllib.request.urlopen("https://www.jma.go.jp/bosai/himawari/data/satimg/targetTimes_jp.json")
        data = json.load(resp)
        self.himawariJapanTargetTime = OrderedDict()
        for item in reversed(data):
            dt = datetime.datetime.strptime(item["validtime"], "%Y%m%d%H%M%S")
            self.himawariJapanTargetTime[dt.strftime("%Y-%m-%dT%H:%M:%S")] = item
        self.himawariJapanTargetTimeModel.setStringList([x for x in self.himawariJapanTargetTime])

    @pyqtSlot()
    def on_toolButtonNowCastTargetTime_clicked(self):
        # Forecast
        resp = urllib.request.urlopen("https://www.jma.go.jp/bosai/jmatile/data/nowc/targetTimes_N2.json")
        data_N2 = json.load(resp)
        # Nowcast
        resp = urllib.request.urlopen("https://www.jma.go.jp/bosai/jmatile/data/nowc/targetTimes_N1.json")
        data_N1 = json.load(resp)
        self.nowCastTargetTime = OrderedDict()
        for item in data_N2:
            dt = datetime.datetime.strptime(item["validtime"], "%Y%m%d%H%M%S")
            self.nowCastTargetTime[dt.strftime("%Y-%m-%dT%H:%M:%S") + " " + self.tr("(Forecast)")] = item
        for item in data_N1:
            dt = datetime.datetime.strptime(item["validtime"], "%Y%m%d%H%M%S")
            self.nowCastTargetTime[dt.strftime("%Y-%m-%dT%H:%M:%S")] = item
        self.nowCastTargetTimeModel.setStringList([x for x in self.nowCastTargetTime])

    @pyqtSlot()
    def on_button_box_accepted(self):
        tab = self.tabWidget.currentWidget()
        if tab == self.tabHimawariFull:
            target_time = self.comboBoxHimawariFullTargetTime.currentText()
            if not target_time:
                return
            if target_time not in self.himawariFullTargetTime:
                return
            item = self.himawariFullTargetTime[target_time]
            basetime = item["basetime"]
            validtime = item["validtime"]
            band_name = self.comboBoxHimawariFullBand.currentText()
            band_index = self.comboBoxHimawariFullBand.currentIndex()
            if band_index < 0 or band_index >= len(self.himawariBand):
                return
            band = self.himawariBand[band_index]
            url = "https://www.jma.go.jp/bosai/himawari/data/satimg/" + basetime + "/fd/" + validtime + "/" + band + "/{z}/{x}/{y}.jpg"
            opacity = self.horizontalSliderHimawariFullOpacity.value() / 100.0
            self.addLayer(self.tr("Himawari (Full disk)") + " " + band_name + " " + target_time, url, zmin=3, zmax=5, opacity=opacity)
        elif tab == self.tabHimawariJapan:
            target_time = self.comboBoxHimawariJapanTargetTime.currentText()
            if not target_time:
                return
            if target_time not in self.himawariJapanTargetTime:
                return
            item = self.himawariJapanTargetTime[target_time]
            basetime = item["basetime"]
            validtime = item["validtime"]
            band_name = self.comboBoxHimawariJapanBand.currentText()
            band_index = self.comboBoxHimawariJapanBand.currentIndex()
            if band_index < 0 or band_index >= len(self.himawariBand):
                return
            band = self.himawariBand[band_index]
            url = "https://www.jma.go.jp/bosai/himawari/data/satimg/" + basetime + "/jp/" + validtime + "/" + band + "/{z}/{x}/{y}.jpg"
            opacity = self.horizontalSliderHimawariJapanOpacity.value() / 100.0
            self.addLayer(self.tr("Himawari (Japan)") + " " + band_name + " " + target_time, url, zmin=6, zmax=6, opacity=opacity)
        elif tab == self.tabNowCast:
            target_time = self.comboBoxNowCastTargetTime.currentText()
            if not target_time:
                return
            if target_time not in self.nowCastTargetTime:
                return
            item = self.nowCastTargetTime[target_time]
            basetime = item["basetime"]
            validtime = item["validtime"]
            url = "https://www.jma.go.jp/bosai/jmatile/data/nowc/" + basetime + "/none/" + validtime + "/surf/hrpns/{z}/{x}/{y}.png"
            opacity = self.horizontalSliderNowCastOpacity.value() / 100.0
            self.addLayer(self.tr("Now Cast") + " " + target_time, url, zmin=4, zmax=10, opacity=opacity)

    def addLayer(self, title, url, zmin=0, zmax=18, type="xyz", crs="EPSG3857", opacity=1.0):
        param = f"type={type}&url={url}&zmax={zmax}&zmin={zmin}&crs={crs}"
        layer = QgsRasterLayer(param, title, "wms")
        layer.setOpacity(opacity)
        if not layer.isValid():
            return
        QgsProject.instance().addMapLayer(layer)

